name: build ecr

on:
  workflow_call:
    outputs:
      image:
        description: "The first output string"
        value: ${{ jobs.build-and-push.outputs.image }}
        
    inputs:
      ecr-repository:
        required: true
        type: string
      dockerfile:
        description: 'Dokerfile path. Defaults to ./Dockerfile'
        default: './Dockerfile'
        type: string
      aws-region:
        description: 'Account Region. Defaults to us-east-2'
        default: 'us-east-2'
        type: string
 

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      description: "The first output string"
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout Dockerfile
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check and create ECR repository if not exists
        id: check-ecr
        run: |
          aws ecr describe-repositories --repository-names ${{ inputs.ecr-repository }} || \
          aws ecr create-repository --repository-name ${{ inputs.ecr-repository }}
          
      # - name: Set ECR repository policy
      #   run: |
      #     aws ecr set-repository-policy \
      #       --repository-name ${{ inputs.ecr-repository }} \
      #       --policy-text file://policy-ecr.json
          
      - name: docker build and push
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ${{ inputs.dockerfile }} --build-arg GITHUB_TOKEN=${{ secrets.KEY_GITHUB }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT